# Copyright: 2018 Sam Halliday
# License: https://www.apache.org/licenses/LICENSE-2.0

# This file enforces the scalazzi safe subset of scala.
#
# For further information, see https://github.com/scalaz/scalazzi

rules = [
  Disable
  DisableSyntax
  ExplicitResultTypes
  LeakingImplicitClassVal
  MissingFinal
  RemoveUnusedImports
  RemoveUnusedTerms
]

Disable.symbols = [
  {
    regex = "^\\Qscala.collection.mutable\\E.*$"
    message = "Java collections have better performance"
  }
  {
    regex = "^\\Qscala.collection.parallel\\E.*$"
    message = "parallel collections are low performance and broken"
  }
  {
    regex = [
      "^\\Qjava.io\\E.*$"
      "^\\Qscala.io\\E.*$"
    ]
    message = "legacy blocking API, prefer java.nio"
  }
  {
    regex = "^\\Qjava.net.URL#\\E.*$"
    message = "URL talks to the network for equality, prefer URI"
  }
  {
    regex = {
      includes = [
        "^\\Qjava.lang.Object\\E.*$"
        "^\\Qscala.Any\\E.*$"
        # overrides not fully implemented: https://github.com/scalacenter/scalafix/pull/634
        "^.*\\Q#equals(Any).\\E$"
        "^.*\\Q#hashCode().\\E$"
        "^.*\\Q#toString().\\E$" # doesn't catch string interpolators...
      ]
    }
    message = "prefer scalaz.{Equal, Show, Liskov, etc}"
  }

  {
    symbol = "scalaz.effect.IO.unsafePerformIO"
    message = "called by the app or test framework"
  }

  {
    symbol = "scala.Enumeration"
    message = "prefer a sealed abstract class"
  }

  {
    regex = {
      includes = [
        "^\\Qscala.util.Either.LeftProjection#get().\\E$"
        "^\\Qscala.util.Either.RightProjection#get().\\E$"
        "^\\Qscala.util.Try#get().\\E$"
        "^\\Qscala.Option#get().\\E$"
        "^\\Qscala.collection.IterableLike#head().\\E$"
      ]
    }
    message = "not a total function"
  }

]

Disable.ifSynthetic = [
   "java.io.Serializable"
   "scala.Any"
   "scala.Product"

   # local type inference + covariant types fires this
   # "scala.Nothing"

   # when upstream broke noImplicitConversion and we don't agree that their
   # implicits are worth the mental burden.
   "scala.Option.option2Iterable"
   "scala.Predef.any2stringadd"

  # I don't understand why these are synthetic
  # https://github.com/scalacenter/scalafix/issues/703
  {
    regex = {
      includes = [
        "^\\Qscala.collection.MapLike#apply(K).\\E$"
        "^\\Qscala.collection.LinearSeqOptimized#apply(Int).\\E$"
      ]
    }
    message = "not a total function"
  }
]

Disable.unlessInside = [
  {
    # https://github.com/scalacenter/scalafix/issues/649
    #safeBlock = "scalaz.effect.IO.apply"
    safeBlock = "com.brickx.std.IO"
    symbols = [
      {
        # This takes the approach of banning everything and then blessing things
        # we trust. It would be entirely feasible to do it the other way and
        # list the explicit list of things that we need to go through IO, but it
        # is less safe. We can have another rule if something in an "excludes"
        # glob catches unsafe things.
        #
        # If something is referentially transparent but not total, instead of
        # adding to this excludes list, add it to the includes list of the
        # scalaz.Maybe.attempt safeBlock. If it can return `null`, add it to a
        # scalaz.Maybe.fromNullable safeBlock.
        regex = {
          includes = [
            "^\\Qjava.\\E.*$"
            #"^.*$"
          ]
          excludes = [
            "^com.brickx.*$"
            "^scalaz.*$"
            "^\\Qjava.lang.String#\\E.*$"
            "^\\Qjava.time.Instant#\\E.*$"
            "^\\Qjava.time.ZonedDateTime#\\E.*$"
            "^\\Qjava.time.temporal.ChronoUnit#\\E.*$"
            "^\\Qjava.net.URI#\\E.*$"
            "^\\Qjava.net.URLEncoder#\\E.*$"
            "^\\Qjava.net.URLDecoder#\\E.*$"
            # primitives are not supported: https://github.com/scalameta/scalameta/issues/1488

            # WORKAROUND https://github.com/scalacenter/scalafix/issues/680
            "^\\Qjava.\\E$"
            "^\\Qjava.lang.\\E$"
            "^\\Qjava.time.\\E$"
            "^\\Qjava.net\\E$"
          ]
        }
        message = "Untrusted third party library must be called from IO, or blessed in scalafix.conf"
      }
    ]
  }
  {
    safeBlock = "scalaz.Maybe.attempt"
    symbols = [
      {
        regex = {
          includes = [
            # should live in a common file so we don't need to duplicate
            "^\\Qjava.net.URLEncoder#\\E.*$"
            "^\\Qjava.net.URLDecoder#\\E.*$"
          ]
          excludes = [
          ]
        }
        message = "Deterministic method is not total, must be called via Maybe.attempt"
      }
    ]
  }
]

DisableSyntax.keywords = [
  var
  null
  return
  throw
  while
]
DisableSyntax.noSemicolons = true
DisableSyntax.noXml = true
DisableSyntax.noCovariantTypes = true
DisableSyntax.noContravariantTypes = true
DisableSyntax.noValInAbstract = true
DisableSyntax.noImplicitObject = true
DisableSyntax.noImplicitConversion = true

ExplicitResultTypes {
  unsafeShortenNames = true

  fatalWarnings = true

  # these apply to non-implicits
  memberKind = [Def, Val]
  memberVisibility = [Public, Protected]

  # turn to the max...
  skipSimpleDefinitions = false
  skipLocalImplicits = false
}
